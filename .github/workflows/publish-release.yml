# Name of the workflow that will appear in the "Actions" tab of GitHub
name: Publish Draft Release on Merge to Prod

# Trigger configuration
on:
  pull_request:
    # Runs only when a Pull Request is closed
    types: [closed]
    # And only if the PR was targeting the 'prod' branch
    branches:
      - 'prod'

jobs:
  publish-release:
    # VERY IMPORTANT condition: The job will only run if the PR was actually merged.
    # This prevents it from running if the PR is closed without merging.
    if: github.event.pull_request.merged == true

    # The type of virtual machine where the job will run
    runs-on: ubuntu-latest

    # Permissions required for the workflow to read and modify releases.
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the code (necessary for the job to have context of the repo)
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Logic to find and publish the draft release
      - name: Find and Publish Latest Draft Release
        id: publish_step # An ID is added to reference the outputs of this step
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # We use the GitHub CLI (gh) to list releases.
          echo "Looking for the latest draft release..."
          RELEASE_ID=$(gh release list --json isDraft,id --jq '.[] | select(.isDraft) | .id' | head -n 1)


          # We check if a draft release was found.
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" == "null" ]; then
            echo "No draft release found. The workflow will finish successfully."
            echo "release_id=" >> $GITHUB_OUTPUT # Set the output as empty using the new method
          else
            # If we find one, we display its ID and proceed to publish it.
            echo "Found draft release with ID: $RELEASE_ID"
            echo "Publishing the release..."
            gh release edit $RELEASE_ID --draft=false
            echo "Release published successfully!"
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT # Set the ID as output for the next step
          fi

      # Step 3: Send notification to Slack
      - name: Send notification to Slack
        # This step only runs if the previous step found and published a release
        if: steps.publish_step.outputs.release_id != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
          RELEASE_ID: ${{ steps.publish_step.outputs.release_id }}
        run: |
          # Get the details of the newly published release
          RELEASE_TAG=$(gh release view $RELEASE_ID --json tagName --jq '.tagName')
          RELEASE_BODY=$(gh release view $RELEASE_ID --json body --jq '.body')
          RELEASE_URL=$(gh release view $RELEASE_ID --json url --jq '.url')

          # Prepare the payload for Slack, escaping special characters to make it a valid JSON
          CLEAN_BODY=$(echo "$RELEASE_BODY" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          # Create the message in JSON format for the Slack API
          SLACK_PAYLOAD=$(printf '{"text": "ðŸš€ *New Release Published: %s*\n\n%s\n\nView on GitHub: %s"}' "$RELEASE_TAG" "$CLEAN_BODY" "$RELEASE_URL")

          echo "Sending notification to Slack..."
          # Use curl to send the notification to the Slack webhook
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_PAYLOAD" $SLACK_WEBHOOK_URL
