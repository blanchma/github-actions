name: Set PR Title

# Triggers when a pull request is opened
on:
  pull_request:
    types: [opened]

# Permissions required for the action to modify the Pull Request
permissions:
  pull-requests: write
  contents: read

jobs:
  set-title:
    runs-on: ubuntu-latest
    steps:
      # 1. Clone the repository
      # fetch-depth: 0 clones the entire history to access all commits
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Find the commit and update the PR title
      - name: Find MVP Commit and Set PR Title
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token to authenticate with the GitHub API
          PR_NUMBER: ${{ github.event.number }}   # Current PR number
        run: |
          echo "Searching for commits in Pull Request #${PR_NUMBER}..."

          # Get the list of commit SHAs in the PR, from oldest to newest (--reverse)
          # Compares the base branch (e.g., main) with the PR's head branch
          commit_hashes=$(git log origin/${{ github.base_ref }}..origin/${{ github.head_ref }} --reverse --pretty=format:"%H")

          if [ -z "$commit_hashes" ]; then
            echo "No commits found."
            exit 0
          fi

          echo "Commits found:"
          echo "$commit_hashes"

          new_title=""
          # Iterate over each commit to find the first one containing 'MVP'
          for commit_sha in $commit_hashes; do
            commit_message=$(git log -1 --pretty=format:%s%n%b "$commit_sha")

            echo "Checking commit ${commit_sha:0:7}: '$commit_message'"

            if [[ "$commit_message" == *MVP* ]]; then
              echo "âœ… Commit with 'MVP' found: ${commit_sha:0:7}"
              new_title=$commit_message
              break # End the loop after finding the first match
            fi
          done

          # If a title was found, update the PR using the GitHub CLI
          if [[ -n "$new_title" ]]; then
            echo "Setting PR title to: '$new_title'"
            gh pr edit $PR_NUMBER --title "$new_title"
            echo "ðŸŽ‰ PR title updated successfully!"
          else
            echo "No commit with 'MVP' was found in its message. No changes were made."
          fi